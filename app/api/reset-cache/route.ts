import { NextResponse } from 'next/server';
import mongoose from 'mongoose';

export async function GET() {
  try {
    console.log('üìå API /reset-cache: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB
    const initialState = mongoose.connection.readyState;
    console.log('üîç API /reset-cache: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', initialState);
    
    if (global.mongoose && global.mongoose.conn) {
      console.log('üîÑ API /reset-cache: –°–±—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è MongoDB');
      global.mongoose.conn = null;
      global.mongoose.promise = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (mongoose.connection.readyState === 1) {
      console.log('üîÑ API /reset-cache: –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB');
      await mongoose.disconnect();
      console.log('‚úÖ API /reset-cache: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ API /reset-cache: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
    await mongoose.connect(process.env.MONGODB_URI || '');
    console.log('‚úÖ API /reset-cache: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    
    return NextResponse.json({
      status: 'ok',
      message: '–ö—ç—à —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB —Å–±—Ä–æ—à–µ–Ω',
      initialState,
      currentState: mongoose.connection.readyState,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå API /reset-cache: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—ç—à–∞:', error);
    
    return NextResponse.json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—ç—à–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 