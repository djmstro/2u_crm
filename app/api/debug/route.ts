import { NextResponse } from 'next/server';
import mongoose from 'mongoose';
import { Article } from '../../../lib/models/article';
import { Section } from '../../../lib/models/section';

export async function GET() {
  try {
    console.log('üìå API /debug: –ù–∞—á–∞–ª–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –Ω–∞–ø—Ä—è–º—É—é
    if (mongoose.connection.readyState !== 1) {
      console.log('üîÑ API /debug: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      await mongoose.connect(process.env.MONGODB_URI || '');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã
    const articles = await Article.find({}).lean();
    const sections = await Section.find({}).lean();
    
    console.log(`üìä API /debug: –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –∏ ${sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç–µ–π –∏ —Ä–∞–∑–¥–µ–ª–æ–≤
    const sectionMap = new Map();
    sections.forEach(section => {
      sectionMap.set(section.priority, {
        id: section._id.toString(),
        name: section.name,
        priority: section.priority,
        type: typeof section.priority,
        articles: []
      });
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
    articles.forEach(article => {
      const sectionKey = article.section;
      const sectionInfo = sectionMap.get(sectionKey);
      
      if (sectionInfo) {
        sectionInfo.articles.push({
          id: article._id.toString(),
          title: article.title,
          section: article.section,
          type: typeof article.section
        });
      } else {
        console.log(`‚ùå API /debug: –°—Ç–∞—Ç—å—è "${article.title}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª: ${sectionKey} (—Ç–∏–ø: ${typeof sectionKey})`);
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const result = Array.from(sectionMap.values());
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      mongodbStatus: mongoose.connection.readyState,
      articleCount: articles.length,
      sectionCount: sections.length,
      sections: result,
      orphanedArticles: articles.filter(a => !sectionMap.has(a.section)).map(a => ({
        id: a._id.toString(),
        title: a.title,
        section: a.section,
        type: typeof a.section
      }))
    };
    
    return NextResponse.json(report);
  } catch (error) {
    console.error('‚ùå API /debug: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
    
    return NextResponse.json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–∫–∏',
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 