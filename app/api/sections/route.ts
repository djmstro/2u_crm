import { NextResponse } from 'next/server';
import { Section, ISection } from '../../../lib/models/section';
import mongoose from 'mongoose';

export async function GET(request: Request) {
  try {
    console.log('üìå API /sections: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞');
    console.log('üåê API /sections: NEXT_PUBLIC_API_URL =', process.env.NEXT_PUBLIC_API_URL);
    
    // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç mongoose –≤–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ connectToDatabase
    // –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
    if (mongoose.connection.readyState !== 1) {
      console.log('üîÑ API /sections: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
      await mongoose.connect(process.env.MONGODB_URI || '');
      console.log('‚úÖ API /sections: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚úÖ API /sections: –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    }
    
    const { searchParams } = new URL(request.url);
    const sectionId = searchParams.get('id');
    
    console.log('üîç API /sections: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { sectionId });
    
    // –í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
    if (sectionId) {
      console.log(`üîç API /sections: –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ ID: ${sectionId}`);
      const section = await Section.findById(sectionId);
      if (section) {
        console.log(`‚úÖ API /sections: –ù–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª: ${section.name}`);
        return NextResponse.json(section);
      } else {
        console.log(`‚ùå API /sections: –†–∞–∑–¥–µ–ª —Å ID ${sectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return NextResponse.json({ error: '–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
      }
    }
    
    // –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    console.log('üîç API /sections: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤');
    const sections = await Section.find({}).sort({ priority: 1 });
    console.log(`‚úÖ API /sections: –ù–∞–π–¥–µ–Ω–æ ${sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (sections.length > 0) {
      sections.forEach(section => {
        console.log(`üìä API /sections: –†–∞–∑–¥–µ–ª "${section.name}", priority:`, section.priority, `(—Ç–∏–ø: ${typeof section.priority})`);
      });
    }
    
    return NextResponse.json(sections);
  } catch (error) {
    console.error('‚ùå API /sections: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    if (mongoose.connection.readyState !== 1) {
      await mongoose.connect(process.env.MONGODB_URI || '');
    }
    
    const body = await request.json();
    const { name, priority, parentId } = body;
    
    console.log('POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:', { name, priority });
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        { status: 400 }
      );
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    const newSection = new Section({
      name,
      priority: priority || 0,
      ...(parentId && { parentId }),
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await newSection.save();
    
    console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª:', newSection._id);
    
    // –í–æ–∑–≤—Ä–∞—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    return NextResponse.json(newSection);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞' },
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    if (mongoose.connection.readyState !== 1) {
      await mongoose.connect(process.env.MONGODB_URI || '');
    }
    
    const body = await request.json();
    const { id, name, priority, parentId } = body;
    
    console.log('PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:', { id });
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID —Ä–∞–∑–¥–µ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    const updatedSection = await Section.findByIdAndUpdate(
      id,
      { 
        ...(name && { name }),
        ...(priority !== undefined && { priority }),
        ...(parentId !== undefined && { parentId }),
      },
      { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    );
    
    if (!updatedSection) {
      return NextResponse.json(
        { error: '–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    console.log('–†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', id);
    
    return NextResponse.json(updatedSection);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    // –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    if (mongoose.connection.readyState !== 1) {
      await mongoose.connect(process.env.MONGODB_URI || '');
    }
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    console.log('DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:', { id });
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID —Ä–∞–∑–¥–µ–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    const deletedSection = await Section.findByIdAndDelete(id);
    
    if (!deletedSection) {
      return NextResponse.json(
        { error: '–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    console.log('–†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω:', id);
    
    return NextResponse.json({ 
      message: '–†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      id 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞' },
      { status: 500 }
    );
  }
} 