import { NextResponse } from 'next/server';
import { Article, IArticle } from '../../../lib/models/article';
import connectToDatabase from '../../../lib/mongodb';

export async function GET(request: Request) {
  try {
    console.log('üìå API /articles: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞');
    console.log('üåê API /articles: NEXT_PUBLIC_API_URL =', process.env.NEXT_PUBLIC_API_URL);
    console.log('üîå API /articles: MONGODB_URI =', process.env.MONGODB_URI ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω (—Å–∫—Ä—ã—Ç)' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
    await connectToDatabase();
    console.log('‚úÖ API /articles: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
    
    const { searchParams } = new URL(request.url);
    const sectionId = searchParams.get('section');
    const articleId = searchParams.get('id');
    
    console.log('üîç API /articles: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { articleId, sectionId });
    
    // –í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
    if (articleId) {
      console.log(`üîç API /articles: –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ –ø–æ ID: ${articleId}`);
      // –ù–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const article = await Article.findByIdAndUpdate(
        articleId,
        { $inc: { viewCount: 1 } }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ 1
        { new: true } // –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      );
      
      if (article) {
        console.log(`‚úÖ API /articles: –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: ${article.title}`);
        return NextResponse.json(article);
      } else {
        console.log(`‚ùå API /articles: –°—Ç–∞—Ç—å—è —Å ID ${articleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return NextResponse.json({ error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
      }
    }
    
    // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–¥–µ–ª—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID —Ä–∞–∑–¥–µ–ª–∞
    if (sectionId) {
      console.log(`üîç API /articles: –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ —Ä–∞–∑–¥–µ–ª—É: ${sectionId}`);
      const articles = await Article.find({ section: parseInt(sectionId) });
      console.log(`‚úÖ API /articles: –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ ${sectionId}`);
      return NextResponse.json(articles);
    }
    
    // –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    console.log('üîç API /articles: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π');
    const articles = await Article.find({});
    console.log(`‚úÖ API /articles: –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (articles.length > 0) {
      articles.forEach(article => {
        console.log(`üìä API /articles: –°—Ç–∞—Ç—å—è "${article.title}", section:`, article.section, `(—Ç–∏–ø: ${typeof article.section})`);
      });
    }
    
    return NextResponse.json(articles);
  } catch (error) {
    console.error('‚ùå API /articles: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π' },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    await connectToDatabase();
    
    const body = await request.json();
    const { title, content, section, author } = body;
    
    console.log('POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:', { title, section });
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!title || !content || !section) {
      return NextResponse.json(
        { error: '–ó–∞–≥–æ–ª–æ–≤–æ–∫, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ä–∞–∑–¥–µ–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
    const newArticle = new Article({
      title,
      content,
      section: parseInt(section),
      author: author || '–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      date: new Date().toLocaleDateString('ru-RU'),
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await newArticle.save();
    
    console.log('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:', newArticle._id);
    
    // –í–æ–∑–≤—Ä–∞—Ç –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
    return NextResponse.json(newArticle);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏' },
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    await connectToDatabase();
    
    const body = await request.json();
    const { id, title, content, section } = body;
    
    console.log('PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:', { id });
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID —Å—Ç–∞—Ç—å–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    const updatedArticle = await Article.findByIdAndUpdate(
      id,
      { 
        ...(title && { title }),
        ...(content && { content }),
        ...(section && { section: parseInt(section) }),
      },
      { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    );
    
    if (!updatedArticle) {
      return NextResponse.json(
        { error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }
    
    console.log('–°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', id);
    
    return NextResponse.json(updatedArticle);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: Request) {
  try {
    await connectToDatabase();
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    console.log('DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:', { id });
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID —Å—Ç–∞—Ç—å–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    const deletedArticle = await Article.findByIdAndDelete(id);
    
    if (!deletedArticle) {
      return NextResponse.json(
        { error: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }
    
    console.log('–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞:', id);
    
    return NextResponse.json({ 
      message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      id 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏' },
      { status: 500 }
    );
  }
} 