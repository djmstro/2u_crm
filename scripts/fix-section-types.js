// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö MongoDB
const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const mongoUri = process.env.MONGODB_URI;
if (!mongoUri) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã MONGODB_URI');
  process.exit(1);
}

// –°—Ö–µ–º—ã –∏ –º–æ–¥–µ–ª–∏
const articleSchema = new mongoose.Schema({
  title: String,
  content: String,
  author: String,
  date: String,
  section: Number,
  acknowledged: [String],
  viewCount: Number,
  createdAt: Date,
  updatedAt: Date
});

const sectionSchema = new mongoose.Schema({
  name: String,
  priority: Number,
  parentId: mongoose.Schema.Types.ObjectId,
  createdAt: Date,
  updatedAt: Date
});

async function fixDatabaseTypes() {
  try {
    await mongoose.connect(mongoUri);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    const Article = mongoose.model('Article', articleSchema);
    const Section = mongoose.model('Section', sectionSchema);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    const articles = await Article.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è section
    let fixedArticles = 0;
    for (const article of articles) {
      const originalType = typeof article.section;
      
      // –ï—Å–ª–∏ section –Ω–µ —á–∏—Å–ª–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
      if (originalType !== 'number') {
        console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ "${article.title}": ${article.section} (${originalType}) -> ${Number(article.section)}`);
        
        article.section = Number(article.section);
        await article.save();
        fixedArticles++;
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    const sections = await Section.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è priority
    let fixedSections = 0;
    for (const section of sections) {
      const originalType = typeof section.priority;
      
      // –ï—Å–ª–∏ priority –Ω–µ —á–∏—Å–ª–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
      if (originalType !== 'number') {
        console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "${section.name}": ${section.priority} (${originalType}) -> ${Number(section.priority)}`);
        
        section.priority = Number(section.priority);
        await section.save();
        fixedSections++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedArticles} —Å—Ç–∞—Ç–µ–π –∏ ${fixedSections} —Ä–∞–∑–¥–µ–ª–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
fixDatabaseTypes(); 